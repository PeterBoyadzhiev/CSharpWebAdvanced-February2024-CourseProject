// <auto-generated />
using System;
using System.Diagnostics.CodeAnalysis;
using ExploreUmami.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ExploreUmami.Data.Migrations
{
    [ExcludeFromCodeCoverage]
    [DbContext(typeof(ExploreUmamiDbContext))]
    partial class ExploreUmamiDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.28")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("ExploreUmami.Data.Models.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("John");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Doe");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("ded2ed0c-9d4f-4d1d-9be1-a0b183548bfc"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a35fcc84-dbc6-4513-b6ef-0d359ab397ad",
                            Email = "admin@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Admin",
                            LastName = "Adminson",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEGiqpN1of8I+A6CYN6N+npZVdxYwQu9dopNxR+AUmqpS4m9RTFTTs7xOf4FwODfYzg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1928F5AA634EAD8BF3C1647437E5E77D",
                            TwoFactorEnabled = false,
                            UserName = "admin@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("1ae80037-f648-442e-a309-4b94a3d1315c"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d5b00fbd-c65e-4e9e-84e8-2a9d8b0aad37",
                            Email = "businessowner@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Jon",
                            LastName = "Doe",
                            LockoutEnabled = false,
                            NormalizedEmail = "BUSINESSOWNER@GMAIL.COM",
                            NormalizedUserName = "BUSINESSOWNER@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEIzon7iounT3bFzYB5snX1Jn2rFRyLixj+Q7pKfYE93NBG/w21P/wcRsMVa/+QwEPg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1A854D3A51C3647D48698D30F4431A20",
                            TwoFactorEnabled = false,
                            UserName = "businessowner@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("b43c3753-de4e-4417-b2ad-1c029c7b9795"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1e60b8e1-a73b-4048-a0e3-0602fa264d3a",
                            Email = "businessowner2@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Jane",
                            LastName = "Doe",
                            LockoutEnabled = false,
                            NormalizedEmail = "BUSINESSOWNER2@GMAIL.COM",
                            NormalizedUserName = "BUSINESSOWNER2@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAED2Zr+m+epUioWFHP43UxT8V3lKxaDSJw30XT3cajt9JdS8JJ/Q3TMPikH4l95lDig==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "D3AEAAF905CF227737B3B389291725F3",
                            TwoFactorEnabled = false,
                            UserName = "businessowner2@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("ab13755f-eaef-4fb4-86a1-9c4609641c83"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cf7f2ce8-b2aa-4d63-a21a-afb293c914db",
                            Email = "reviewer@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Jovani",
                            LastName = "Dawson",
                            LockoutEnabled = false,
                            NormalizedEmail = "REVIEWER@GMAIL.COM",
                            NormalizedUserName = "REVIEWER@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEGCWULDuMbl0HclSfQu+KUb5Izh0HUcH/n8+HXjl6y0l6P4X1xKpn/dXqaCL6KNWiw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "32164FCA6194D48012BFCF3782787855",
                            TwoFactorEnabled = false,
                            UserName = "reviewer@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("8f5d89a1-dda8-4400-bf47-690ae86f1846"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ad013748-4426-4a27-9876-8002452507bf",
                            Email = "reviewer2@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Janette",
                            LastName = "Dane",
                            LockoutEnabled = false,
                            NormalizedEmail = "REVIEWER2@GMAIL.COM",
                            NormalizedUserName = "REVIEWER2@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEIrhn3u3Gu5k5w+ZckmE26Nj9Dy2c8MxhWyRYo3rWSOIhAS4rtpEoQTMtlfK/9SEGQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "93EACEAA9EAB9F8ED3965938F4BE0ED4",
                            TwoFactorEnabled = false,
                            UserName = "reviewer2@gmail.com"
                        });
                });

            modelBuilder.Entity("ExploreUmami.Data.Models.Business", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("BusinessOwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsApproved")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("PrefectureId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("VisitorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("WebsiteUrl")
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.HasKey("Id");

                    b.HasIndex("BusinessOwnerId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("PrefectureId");

                    b.HasIndex("VisitorId");

                    b.ToTable("Businesses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6eec121f-f98e-4008-9551-2d8a4b38da98"),
                            Address = "123 Main Street",
                            BusinessOwnerId = new Guid("c805ddb6-bcf7-47a3-8744-3ec84036caa0"),
                            CategoryId = 1,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "A place where you can eat food",
                            ImageUrl = "https://dummyimage.com/400x200",
                            IsActive = true,
                            IsApproved = true,
                            PhoneNumber = "12-3456-7890",
                            PrefectureId = 1,
                            Title = "Restaurant",
                            WebsiteUrl = "https://www.restaurant.com"
                        },
                        new
                        {
                            Id = new Guid("8f87f835-3deb-43b4-aa01-852c5d287984"),
                            Address = "456 Elm Street",
                            BusinessOwnerId = new Guid("e826ff19-1946-4237-b266-e326cbead8ff"),
                            CategoryId = 2,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "A place where you can drink coffee",
                            ImageUrl = "https://dummyimage.com/400x200",
                            IsActive = true,
                            IsApproved = true,
                            PhoneNumber = "12-3456-7890",
                            PrefectureId = 2,
                            Title = "Cafe",
                            WebsiteUrl = "https://www.cafe.com"
                        },
                        new
                        {
                            Id = new Guid("7c8605e4-9e6c-474f-8c3c-a837d631c8d4"),
                            Address = "789 Oak Street",
                            BusinessOwnerId = new Guid("c805ddb6-bcf7-47a3-8744-3ec84036caa0"),
                            CategoryId = 3,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "A place where you can drink alcohol",
                            ImageUrl = "https://dummyimage.com/400x200",
                            IsActive = true,
                            IsApproved = true,
                            PhoneNumber = "12-3456-7890",
                            PrefectureId = 3,
                            Title = "Bar",
                            WebsiteUrl = "https://www.bar.com"
                        },
                        new
                        {
                            Id = new Guid("4222168e-c018-418e-812f-f8d41b322522"),
                            Address = "1012 Pine Street",
                            BusinessOwnerId = new Guid("c805ddb6-bcf7-47a3-8744-3ec84036caa0"),
                            CategoryId = 4,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "A place where you can buy bread",
                            ImageUrl = "https://dummyimage.com/400x200",
                            IsActive = true,
                            IsApproved = true,
                            PhoneNumber = "12-3456-7890",
                            PrefectureId = 4,
                            Title = "Bakery",
                            WebsiteUrl = "https://www.bakery.com"
                        },
                        new
                        {
                            Id = new Guid("e39d9dc4-519f-4c74-9f59-86083df887c6"),
                            Address = "1314 Cedar Street",
                            BusinessOwnerId = new Guid("c805ddb6-bcf7-47a3-8744-3ec84036caa0"),
                            CategoryId = 5,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "A place where you can eat food quickly",
                            ImageUrl = "https://dummyimage.com/400x200",
                            IsActive = true,
                            IsApproved = true,
                            PhoneNumber = "12-3456-7890",
                            PrefectureId = 5,
                            Title = "Fast Food",
                            WebsiteUrl = "https://www.fastfood.com"
                        },
                        new
                        {
                            Id = new Guid("81141350-8def-4b0f-8b4a-558fa3805145"),
                            Address = "1516 Maple Street",
                            BusinessOwnerId = new Guid("e826ff19-1946-4237-b266-e326cbead8ff"),
                            CategoryId = 6,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "A place where you can eat food on the go",
                            ImageUrl = "https://dummyimage.com/400x200",
                            IsActive = false,
                            IsApproved = true,
                            PhoneNumber = "12-3456-7890",
                            PrefectureId = 6,
                            Title = "Food Truck",
                            WebsiteUrl = "https://www.foodtruck.com"
                        },
                        new
                        {
                            Id = new Guid("cb4ef459-43f8-42eb-b6fb-283047ff0000"),
                            Address = "1718 Walnut Street",
                            BusinessOwnerId = new Guid("e826ff19-1946-4237-b266-e326cbead8ff"),
                            CategoryId = 7,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "A place where you can eat dessert",
                            ImageUrl = "https://dummyimage.com/400x200",
                            IsActive = true,
                            IsApproved = false,
                            PhoneNumber = "12-3456-7890",
                            PrefectureId = 1,
                            Title = "Dessert Shop",
                            WebsiteUrl = "https://www.dessertshop.com"
                        },
                        new
                        {
                            Id = new Guid("40fe3c23-e9bf-416d-8994-18d657b812ea"),
                            Address = "1920 Cherry Street",
                            BusinessOwnerId = new Guid("e826ff19-1946-4237-b266-e326cbead8ff"),
                            CategoryId = 8,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "A place where you can buy food",
                            ImageUrl = "https://dummyimage.com/400x200",
                            IsActive = true,
                            IsApproved = false,
                            PhoneNumber = "12-3456-7890",
                            PrefectureId = 1,
                            Title = "Grocery Store",
                            WebsiteUrl = "https://www.grocerystore.com"
                        });
                });

            modelBuilder.Entity("ExploreUmami.Data.Models.BusinessOwner", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("NameOfBusiness")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("BusinessOwners");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c805ddb6-bcf7-47a3-8744-3ec84036caa0"),
                            FirstName = "John",
                            LastName = "Doe",
                            NameOfBusiness = "John's Restaurant",
                            PhoneNumber = "12-3456-7890",
                            UserId = new Guid("1ae80037-f648-442e-a309-4b94a3d1315c")
                        },
                        new
                        {
                            Id = new Guid("e826ff19-1946-4237-b266-e326cbead8ff"),
                            FirstName = "Jane",
                            LastName = "Doe",
                            NameOfBusiness = "Jane's Cafe",
                            PhoneNumber = "12-3456-7890",
                            UserId = new Guid("b43c3753-de4e-4417-b2ad-1c029c7b9795")
                        });
                });

            modelBuilder.Entity("ExploreUmami.Data.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Restaurant"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Cafe"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Bar"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Bakery"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Fast Food"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Food Truck"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Dessert Shop"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Grocery Store"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Market"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Food Stand"
                        });
                });

            modelBuilder.Entity("ExploreUmami.Data.Models.Prefecture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Prefectures");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Hokkaido"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Aomori"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Iwate"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Miyagi"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Akita"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Yamagata"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Fukushima"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Ibaraki"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Tochigi"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Gunma"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Saitama"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Chiba"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Tokyo"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Kanagawa"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Niigata"
                        },
                        new
                        {
                            Id = 16,
                            Name = "Toyama"
                        },
                        new
                        {
                            Id = 17,
                            Name = "Ishikawa"
                        },
                        new
                        {
                            Id = 18,
                            Name = "Fukui"
                        },
                        new
                        {
                            Id = 19,
                            Name = "Yamanashi"
                        },
                        new
                        {
                            Id = 20,
                            Name = "Nagano"
                        },
                        new
                        {
                            Id = 21,
                            Name = "Gifu"
                        },
                        new
                        {
                            Id = 22,
                            Name = "Shizuoka"
                        },
                        new
                        {
                            Id = 23,
                            Name = "Aichi"
                        },
                        new
                        {
                            Id = 24,
                            Name = "Mie"
                        },
                        new
                        {
                            Id = 25,
                            Name = "Shiga"
                        },
                        new
                        {
                            Id = 26,
                            Name = "Kyoto"
                        },
                        new
                        {
                            Id = 27,
                            Name = "Osaka"
                        },
                        new
                        {
                            Id = 28,
                            Name = "Hyogo"
                        },
                        new
                        {
                            Id = 29,
                            Name = "Nara"
                        },
                        new
                        {
                            Id = 30,
                            Name = "Wakayama"
                        },
                        new
                        {
                            Id = 31,
                            Name = "Tottori"
                        },
                        new
                        {
                            Id = 32,
                            Name = "Shimane"
                        },
                        new
                        {
                            Id = 33,
                            Name = "Okayama"
                        },
                        new
                        {
                            Id = 34,
                            Name = "Hiroshima"
                        },
                        new
                        {
                            Id = 35,
                            Name = "Yamaguchi"
                        },
                        new
                        {
                            Id = 36,
                            Name = "Tokushima"
                        },
                        new
                        {
                            Id = 37,
                            Name = "Kagawa"
                        },
                        new
                        {
                            Id = 38,
                            Name = "Ehime"
                        },
                        new
                        {
                            Id = 39,
                            Name = "Kochi"
                        },
                        new
                        {
                            Id = 40,
                            Name = "Fukuoka"
                        },
                        new
                        {
                            Id = 41,
                            Name = "Saga"
                        },
                        new
                        {
                            Id = 42,
                            Name = "Nagasaki"
                        },
                        new
                        {
                            Id = 43,
                            Name = "Kumamoto"
                        },
                        new
                        {
                            Id = 44,
                            Name = "Oita"
                        },
                        new
                        {
                            Id = 45,
                            Name = "Miyazaki"
                        },
                        new
                        {
                            Id = 46,
                            Name = "Kagoshima"
                        },
                        new
                        {
                            Id = 47,
                            Name = "Okinawa"
                        });
                });

            modelBuilder.Entity("ExploreUmami.Data.Models.Reservation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BusinessId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("ReservationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("Pending");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BusinessId");

                    b.HasIndex("UserId");

                    b.ToTable("Reservations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ccbf170d-f0a7-4dbf-8bdf-6f101548f833"),
                            BusinessId = new Guid("6eec121f-f98e-4008-9551-2d8a4b38da98"),
                            ReservationDate = new DateTime(2024, 4, 15, 18, 16, 17, 295, DateTimeKind.Utc).AddTicks(5963),
                            Status = "Completed",
                            UserId = new Guid("ab13755f-eaef-4fb4-86a1-9c4609641c83")
                        },
                        new
                        {
                            Id = new Guid("266a74bb-e01c-4bfc-86a6-d5aaee18574f"),
                            BusinessId = new Guid("6eec121f-f98e-4008-9551-2d8a4b38da98"),
                            Notes = "Please reserve a table for a family of 3 adults and 2 children",
                            ReservationDate = new DateTime(2024, 4, 15, 18, 16, 17, 295, DateTimeKind.Utc).AddTicks(6721),
                            Status = "Completed",
                            UserId = new Guid("8f5d89a1-dda8-4400-bf47-690ae86f1846")
                        },
                        new
                        {
                            Id = new Guid("d3d3d3d3-3d3d-3d3d-3d3d-3d3d3d3d3d3d"),
                            BusinessId = new Guid("8f87f835-3deb-43b4-aa01-852c5d287984"),
                            Notes = "Please reserve a table for 4 adults",
                            ReservationDate = new DateTime(2024, 4, 15, 18, 16, 17, 295, DateTimeKind.Utc).AddTicks(6969),
                            Status = "Completed",
                            UserId = new Guid("ab13755f-eaef-4fb4-86a1-9c4609641c83")
                        },
                        new
                        {
                            Id = new Guid("cd6698f0-7d34-4b6c-b9d2-76b1335af34f"),
                            BusinessId = new Guid("7c8605e4-9e6c-474f-8c3c-a837d631c8d4"),
                            Notes = "Reserve 4 tables, we are a big company",
                            ReservationDate = new DateTime(2024, 4, 15, 18, 16, 17, 295, DateTimeKind.Utc).AddTicks(7028),
                            Status = "Pending",
                            UserId = new Guid("8f5d89a1-dda8-4400-bf47-690ae86f1846")
                        },
                        new
                        {
                            Id = new Guid("11154b62-2abd-404a-827e-f4e69ad94678"),
                            BusinessId = new Guid("4222168e-c018-418e-812f-f8d41b322522"),
                            Notes = "I'll be visiting with my grandma.",
                            ReservationDate = new DateTime(2024, 4, 15, 18, 16, 17, 295, DateTimeKind.Utc).AddTicks(7039),
                            Status = "Confirmed",
                            UserId = new Guid("ab13755f-eaef-4fb4-86a1-9c4609641c83")
                        },
                        new
                        {
                            Id = new Guid("bb49a06d-fbd1-4fdd-a7d4-d309445c59f8"),
                            BusinessId = new Guid("4222168e-c018-418e-812f-f8d41b322522"),
                            Notes = "Looking for delicious pastries",
                            ReservationDate = new DateTime(2024, 4, 15, 18, 16, 17, 295, DateTimeKind.Utc).AddTicks(7048),
                            Status = "Completed",
                            UserId = new Guid("8f5d89a1-dda8-4400-bf47-690ae86f1846")
                        },
                        new
                        {
                            Id = new Guid("2f014787-c27c-4406-9b55-4dbcef08eeff"),
                            BusinessId = new Guid("e39d9dc4-519f-4c74-9f59-86083df887c6"),
                            Notes = "I won't be able to make it, sorry!",
                            ReservationDate = new DateTime(2024, 4, 15, 18, 16, 17, 295, DateTimeKind.Utc).AddTicks(7052),
                            Status = "Cancelled",
                            UserId = new Guid("8f5d89a1-dda8-4400-bf47-690ae86f1846")
                        });
                });

            modelBuilder.Entity("ExploreUmami.Data.Models.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BusinessId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<double>("Rating")
                        .HasColumnType("float");

                    b.Property<Guid>("ReviewerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<DateTime>("TimeStamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("UserLocation")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ReviewerId");

                    b.HasIndex("BusinessId", "ReviewerId")
                        .IsUnique();

                    b.ToTable("Reviews");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1b49d0aa-f195-4896-b1b9-8f852cf337f3"),
                            BusinessId = new Guid("6eec121f-f98e-4008-9551-2d8a4b38da98"),
                            Content = "The food was incredible, best chefs in the prefecture",
                            IsActive = false,
                            Rating = 5.0,
                            ReviewerId = new Guid("ab13755f-eaef-4fb4-86a1-9c4609641c83"),
                            Subject = "Great food!",
                            TimeStamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("c24c77af-568c-4021-85ac-7caca0fd0d84"),
                            BusinessId = new Guid("8f87f835-3deb-43b4-aa01-852c5d287984"),
                            Content = "The coffee was amazing, I had a very pleasant coffee experience",
                            IsActive = false,
                            Rating = 5.0,
                            ReviewerId = new Guid("ab13755f-eaef-4fb4-86a1-9c4609641c83"),
                            Subject = "Great coffee!",
                            TimeStamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("4dacbd5b-f210-43bd-b998-4ea74609f89d"),
                            BusinessId = new Guid("4222168e-c018-418e-812f-f8d41b322522"),
                            Content = "It had everything I was looking for but there were squished fruits on the floor",
                            IsActive = false,
                            Rating = 4.0,
                            ReviewerId = new Guid("8f5d89a1-dda8-4400-bf47-690ae86f1846"),
                            Subject = "Nice place but dirty.",
                            TimeStamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("ExploreUmami.Data.Models.UserVisit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BusinessId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid>("ReservationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("VisitDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.HasKey("Id");

                    b.HasIndex("BusinessId");

                    b.HasIndex("ReservationId");

                    b.HasIndex("UserId");

                    b.ToTable("UserVisits");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ab13755f-eaef-4fb4-86a1-9c4609641c85"),
                            BusinessId = new Guid("6eec121f-f98e-4008-9551-2d8a4b38da98"),
                            ReservationId = new Guid("ccbf170d-f0a7-4dbf-8bdf-6f101548f833"),
                            UserId = new Guid("ab13755f-eaef-4fb4-86a1-9c4609641c83"),
                            VisitDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("8f5d89a1-dda8-4400-bf47-690ae86f1847"),
                            BusinessId = new Guid("6eec121f-f98e-4008-9551-2d8a4b38da98"),
                            ReservationId = new Guid("266a74bb-e01c-4bfc-86a6-d5aaee18574f"),
                            UserId = new Guid("8f5d89a1-dda8-4400-bf47-690ae86f1846"),
                            VisitDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("ab13755f-eaef-4fb4-86a1-9c4609641c84"),
                            BusinessId = new Guid("8f87f835-3deb-43b4-aa01-852c5d287984"),
                            ReservationId = new Guid("d3d3d3d3-3d3d-3d3d-3d3d-3d3d3d3d3d3d"),
                            UserId = new Guid("ab13755f-eaef-4fb4-86a1-9c4609641c83"),
                            VisitDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("4f8e6201-2013-428a-8ddb-c75312ca9bff"),
                            BusinessId = new Guid("4222168e-c018-418e-812f-f8d41b322522"),
                            ReservationId = new Guid("bb49a06d-fbd1-4fdd-a7d4-d309445c59f8"),
                            UserId = new Guid("8f5d89a1-dda8-4400-bf47-690ae86f1846"),
                            VisitDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ExploreUmami.Data.Models.Business", b =>
                {
                    b.HasOne("ExploreUmami.Data.Models.BusinessOwner", "BusinessOwner")
                        .WithMany("OwnedBusinesses")
                        .HasForeignKey("BusinessOwnerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ExploreUmami.Data.Models.Category", "Category")
                        .WithMany("Businesses")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ExploreUmami.Data.Models.Prefecture", "Prefecture")
                        .WithMany("Businesses")
                        .HasForeignKey("PrefectureId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ExploreUmami.Data.Models.ApplicationUser", "Visitor")
                        .WithMany()
                        .HasForeignKey("VisitorId");

                    b.Navigation("BusinessOwner");

                    b.Navigation("Category");

                    b.Navigation("Prefecture");

                    b.Navigation("Visitor");
                });

            modelBuilder.Entity("ExploreUmami.Data.Models.BusinessOwner", b =>
                {
                    b.HasOne("ExploreUmami.Data.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ExploreUmami.Data.Models.Reservation", b =>
                {
                    b.HasOne("ExploreUmami.Data.Models.Business", "Business")
                        .WithMany("Reservations")
                        .HasForeignKey("BusinessId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ExploreUmami.Data.Models.ApplicationUser", "User")
                        .WithMany("Reservations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Business");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ExploreUmami.Data.Models.Review", b =>
                {
                    b.HasOne("ExploreUmami.Data.Models.Business", "Business")
                        .WithMany("Reviews")
                        .HasForeignKey("BusinessId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ExploreUmami.Data.Models.ApplicationUser", "Reviewer")
                        .WithMany("Reviews")
                        .HasForeignKey("ReviewerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Business");

                    b.Navigation("Reviewer");
                });

            modelBuilder.Entity("ExploreUmami.Data.Models.UserVisit", b =>
                {
                    b.HasOne("ExploreUmami.Data.Models.Business", "Business")
                        .WithMany("UserVisits")
                        .HasForeignKey("BusinessId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ExploreUmami.Data.Models.Reservation", "Reservation")
                        .WithMany()
                        .HasForeignKey("ReservationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ExploreUmami.Data.Models.ApplicationUser", "User")
                        .WithMany("UserVisits")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Business");

                    b.Navigation("Reservation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("ExploreUmami.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("ExploreUmami.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ExploreUmami.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("ExploreUmami.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ExploreUmami.Data.Models.ApplicationUser", b =>
                {
                    b.Navigation("Reservations");

                    b.Navigation("Reviews");

                    b.Navigation("UserVisits");
                });

            modelBuilder.Entity("ExploreUmami.Data.Models.Business", b =>
                {
                    b.Navigation("Reservations");

                    b.Navigation("Reviews");

                    b.Navigation("UserVisits");
                });

            modelBuilder.Entity("ExploreUmami.Data.Models.BusinessOwner", b =>
                {
                    b.Navigation("OwnedBusinesses");
                });

            modelBuilder.Entity("ExploreUmami.Data.Models.Category", b =>
                {
                    b.Navigation("Businesses");
                });

            modelBuilder.Entity("ExploreUmami.Data.Models.Prefecture", b =>
                {
                    b.Navigation("Businesses");
                });
#pragma warning restore 612, 618
        }
    }
}
